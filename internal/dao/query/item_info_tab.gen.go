// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wechat-merchant-go/internal/dao/model"
)

func newItemInfoTab(db *gorm.DB, opts ...gen.DOOption) itemInfoTab {
	_itemInfoTab := itemInfoTab{}

	_itemInfoTab.itemInfoTabDo.UseDB(db, opts...)
	_itemInfoTab.itemInfoTabDo.UseModel(&model.ItemInfoTab{})

	tableName := _itemInfoTab.itemInfoTabDo.TableName()
	_itemInfoTab.ALL = field.NewAsterisk(tableName)
	_itemInfoTab.ID = field.NewUint64(tableName, "id")
	_itemInfoTab.ItemID = field.NewUint32(tableName, "item_id")
	_itemInfoTab.ItemName = field.NewString(tableName, "item_name")
	_itemInfoTab.CategoryID = field.NewUint32(tableName, "category_id")
	_itemInfoTab.CategoryName = field.NewString(tableName, "category_name")
	_itemInfoTab.ShopID = field.NewUint32(tableName, "shop_id")
	_itemInfoTab.Ctime = field.NewUint32(tableName, "ctime")
	_itemInfoTab.Mtime = field.NewUint32(tableName, "mtime")

	_itemInfoTab.fillFieldMap()

	return _itemInfoTab
}

type itemInfoTab struct {
	itemInfoTabDo itemInfoTabDo

	ALL          field.Asterisk
	ID           field.Uint64
	ItemID       field.Uint32
	ItemName     field.String
	CategoryID   field.Uint32
	CategoryName field.String
	ShopID       field.Uint32
	Ctime        field.Uint32
	Mtime        field.Uint32

	fieldMap map[string]field.Expr
}

func (i itemInfoTab) Table(newTableName string) *itemInfoTab {
	i.itemInfoTabDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemInfoTab) As(alias string) *itemInfoTab {
	i.itemInfoTabDo.DO = *(i.itemInfoTabDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemInfoTab) updateTableName(table string) *itemInfoTab {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint64(table, "id")
	i.ItemID = field.NewUint32(table, "item_id")
	i.ItemName = field.NewString(table, "item_name")
	i.CategoryID = field.NewUint32(table, "category_id")
	i.CategoryName = field.NewString(table, "category_name")
	i.ShopID = field.NewUint32(table, "shop_id")
	i.Ctime = field.NewUint32(table, "ctime")
	i.Mtime = field.NewUint32(table, "mtime")

	i.fillFieldMap()

	return i
}

func (i *itemInfoTab) WithContext(ctx context.Context) *itemInfoTabDo {
	return i.itemInfoTabDo.WithContext(ctx)
}

func (i itemInfoTab) TableName() string { return i.itemInfoTabDo.TableName() }

func (i itemInfoTab) Alias() string { return i.itemInfoTabDo.Alias() }

func (i itemInfoTab) Columns(cols ...field.Expr) gen.Columns { return i.itemInfoTabDo.Columns(cols...) }

func (i *itemInfoTab) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemInfoTab) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["item_id"] = i.ItemID
	i.fieldMap["item_name"] = i.ItemName
	i.fieldMap["category_id"] = i.CategoryID
	i.fieldMap["category_name"] = i.CategoryName
	i.fieldMap["shop_id"] = i.ShopID
	i.fieldMap["ctime"] = i.Ctime
	i.fieldMap["mtime"] = i.Mtime
}

func (i itemInfoTab) clone(db *gorm.DB) itemInfoTab {
	i.itemInfoTabDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemInfoTab) replaceDB(db *gorm.DB) itemInfoTab {
	i.itemInfoTabDo.ReplaceDB(db)
	return i
}

type itemInfoTabDo struct{ gen.DO }

func (i itemInfoTabDo) Debug() *itemInfoTabDo {
	return i.withDO(i.DO.Debug())
}

func (i itemInfoTabDo) WithContext(ctx context.Context) *itemInfoTabDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemInfoTabDo) ReadDB() *itemInfoTabDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemInfoTabDo) WriteDB() *itemInfoTabDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemInfoTabDo) Session(config *gorm.Session) *itemInfoTabDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemInfoTabDo) Clauses(conds ...clause.Expression) *itemInfoTabDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemInfoTabDo) Returning(value interface{}, columns ...string) *itemInfoTabDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemInfoTabDo) Not(conds ...gen.Condition) *itemInfoTabDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemInfoTabDo) Or(conds ...gen.Condition) *itemInfoTabDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemInfoTabDo) Select(conds ...field.Expr) *itemInfoTabDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemInfoTabDo) Where(conds ...gen.Condition) *itemInfoTabDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemInfoTabDo) Order(conds ...field.Expr) *itemInfoTabDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemInfoTabDo) Distinct(cols ...field.Expr) *itemInfoTabDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemInfoTabDo) Omit(cols ...field.Expr) *itemInfoTabDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemInfoTabDo) Join(table schema.Tabler, on ...field.Expr) *itemInfoTabDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemInfoTabDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemInfoTabDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemInfoTabDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemInfoTabDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemInfoTabDo) Group(cols ...field.Expr) *itemInfoTabDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemInfoTabDo) Having(conds ...gen.Condition) *itemInfoTabDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemInfoTabDo) Limit(limit int) *itemInfoTabDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemInfoTabDo) Offset(offset int) *itemInfoTabDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemInfoTabDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemInfoTabDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemInfoTabDo) Unscoped() *itemInfoTabDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemInfoTabDo) Create(values ...*model.ItemInfoTab) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemInfoTabDo) CreateInBatches(values []*model.ItemInfoTab, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemInfoTabDo) Save(values ...*model.ItemInfoTab) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemInfoTabDo) First() (*model.ItemInfoTab, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemInfoTab), nil
	}
}

func (i itemInfoTabDo) Take() (*model.ItemInfoTab, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemInfoTab), nil
	}
}

func (i itemInfoTabDo) Last() (*model.ItemInfoTab, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemInfoTab), nil
	}
}

func (i itemInfoTabDo) Find() ([]*model.ItemInfoTab, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemInfoTab), err
}

func (i itemInfoTabDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemInfoTab, err error) {
	buf := make([]*model.ItemInfoTab, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemInfoTabDo) FindInBatches(result *[]*model.ItemInfoTab, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemInfoTabDo) Attrs(attrs ...field.AssignExpr) *itemInfoTabDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemInfoTabDo) Assign(attrs ...field.AssignExpr) *itemInfoTabDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemInfoTabDo) Joins(fields ...field.RelationField) *itemInfoTabDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemInfoTabDo) Preload(fields ...field.RelationField) *itemInfoTabDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemInfoTabDo) FirstOrInit() (*model.ItemInfoTab, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemInfoTab), nil
	}
}

func (i itemInfoTabDo) FirstOrCreate() (*model.ItemInfoTab, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemInfoTab), nil
	}
}

func (i itemInfoTabDo) FindByPage(offset int, limit int) (result []*model.ItemInfoTab, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemInfoTabDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemInfoTabDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemInfoTabDo) Delete(models ...*model.ItemInfoTab) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemInfoTabDo) withDO(do gen.Dao) *itemInfoTabDo {
	i.DO = *do.(*gen.DO)
	return i
}
