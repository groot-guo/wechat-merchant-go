// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wechat-merchant-go/internal/dao/model"
)

func newShopInfoTab(db *gorm.DB, opts ...gen.DOOption) shopInfoTab {
	_shopInfoTab := shopInfoTab{}

	_shopInfoTab.shopInfoTabDo.UseDB(db, opts...)
	_shopInfoTab.shopInfoTabDo.UseModel(&model.ShopInfoTab{})

	tableName := _shopInfoTab.shopInfoTabDo.TableName()
	_shopInfoTab.ALL = field.NewAsterisk(tableName)
	_shopInfoTab.ID = field.NewUint64(tableName, "id")
	_shopInfoTab.ShopID = field.NewUint32(tableName, "shop_id")
	_shopInfoTab.ShopName = field.NewString(tableName, "shop_name")
	_shopInfoTab.Ctime = field.NewUint32(tableName, "ctime")
	_shopInfoTab.Mtime = field.NewUint32(tableName, "mtime")

	_shopInfoTab.fillFieldMap()

	return _shopInfoTab
}

type shopInfoTab struct {
	shopInfoTabDo shopInfoTabDo

	ALL      field.Asterisk
	ID       field.Uint64
	ShopID   field.Uint32
	ShopName field.String
	Ctime    field.Uint32
	Mtime    field.Uint32

	fieldMap map[string]field.Expr
}

func (s shopInfoTab) Table(newTableName string) *shopInfoTab {
	s.shopInfoTabDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shopInfoTab) As(alias string) *shopInfoTab {
	s.shopInfoTabDo.DO = *(s.shopInfoTabDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shopInfoTab) updateTableName(table string) *shopInfoTab {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.ShopID = field.NewUint32(table, "shop_id")
	s.ShopName = field.NewString(table, "shop_name")
	s.Ctime = field.NewUint32(table, "ctime")
	s.Mtime = field.NewUint32(table, "mtime")

	s.fillFieldMap()

	return s
}

func (s *shopInfoTab) WithContext(ctx context.Context) *shopInfoTabDo {
	return s.shopInfoTabDo.WithContext(ctx)
}

func (s shopInfoTab) TableName() string { return s.shopInfoTabDo.TableName() }

func (s shopInfoTab) Alias() string { return s.shopInfoTabDo.Alias() }

func (s shopInfoTab) Columns(cols ...field.Expr) gen.Columns { return s.shopInfoTabDo.Columns(cols...) }

func (s *shopInfoTab) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shopInfoTab) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["shop_id"] = s.ShopID
	s.fieldMap["shop_name"] = s.ShopName
	s.fieldMap["ctime"] = s.Ctime
	s.fieldMap["mtime"] = s.Mtime
}

func (s shopInfoTab) clone(db *gorm.DB) shopInfoTab {
	s.shopInfoTabDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shopInfoTab) replaceDB(db *gorm.DB) shopInfoTab {
	s.shopInfoTabDo.ReplaceDB(db)
	return s
}

type shopInfoTabDo struct{ gen.DO }

func (s shopInfoTabDo) Debug() *shopInfoTabDo {
	return s.withDO(s.DO.Debug())
}

func (s shopInfoTabDo) WithContext(ctx context.Context) *shopInfoTabDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shopInfoTabDo) ReadDB() *shopInfoTabDo {
	return s.Clauses(dbresolver.Read)
}

func (s shopInfoTabDo) WriteDB() *shopInfoTabDo {
	return s.Clauses(dbresolver.Write)
}

func (s shopInfoTabDo) Session(config *gorm.Session) *shopInfoTabDo {
	return s.withDO(s.DO.Session(config))
}

func (s shopInfoTabDo) Clauses(conds ...clause.Expression) *shopInfoTabDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shopInfoTabDo) Returning(value interface{}, columns ...string) *shopInfoTabDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shopInfoTabDo) Not(conds ...gen.Condition) *shopInfoTabDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shopInfoTabDo) Or(conds ...gen.Condition) *shopInfoTabDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shopInfoTabDo) Select(conds ...field.Expr) *shopInfoTabDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shopInfoTabDo) Where(conds ...gen.Condition) *shopInfoTabDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shopInfoTabDo) Order(conds ...field.Expr) *shopInfoTabDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shopInfoTabDo) Distinct(cols ...field.Expr) *shopInfoTabDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shopInfoTabDo) Omit(cols ...field.Expr) *shopInfoTabDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shopInfoTabDo) Join(table schema.Tabler, on ...field.Expr) *shopInfoTabDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shopInfoTabDo) LeftJoin(table schema.Tabler, on ...field.Expr) *shopInfoTabDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shopInfoTabDo) RightJoin(table schema.Tabler, on ...field.Expr) *shopInfoTabDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shopInfoTabDo) Group(cols ...field.Expr) *shopInfoTabDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shopInfoTabDo) Having(conds ...gen.Condition) *shopInfoTabDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shopInfoTabDo) Limit(limit int) *shopInfoTabDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shopInfoTabDo) Offset(offset int) *shopInfoTabDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shopInfoTabDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *shopInfoTabDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shopInfoTabDo) Unscoped() *shopInfoTabDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shopInfoTabDo) Create(values ...*model.ShopInfoTab) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shopInfoTabDo) CreateInBatches(values []*model.ShopInfoTab, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shopInfoTabDo) Save(values ...*model.ShopInfoTab) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shopInfoTabDo) First() (*model.ShopInfoTab, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShopInfoTab), nil
	}
}

func (s shopInfoTabDo) Take() (*model.ShopInfoTab, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShopInfoTab), nil
	}
}

func (s shopInfoTabDo) Last() (*model.ShopInfoTab, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShopInfoTab), nil
	}
}

func (s shopInfoTabDo) Find() ([]*model.ShopInfoTab, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShopInfoTab), err
}

func (s shopInfoTabDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShopInfoTab, err error) {
	buf := make([]*model.ShopInfoTab, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shopInfoTabDo) FindInBatches(result *[]*model.ShopInfoTab, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shopInfoTabDo) Attrs(attrs ...field.AssignExpr) *shopInfoTabDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shopInfoTabDo) Assign(attrs ...field.AssignExpr) *shopInfoTabDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shopInfoTabDo) Joins(fields ...field.RelationField) *shopInfoTabDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shopInfoTabDo) Preload(fields ...field.RelationField) *shopInfoTabDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shopInfoTabDo) FirstOrInit() (*model.ShopInfoTab, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShopInfoTab), nil
	}
}

func (s shopInfoTabDo) FirstOrCreate() (*model.ShopInfoTab, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShopInfoTab), nil
	}
}

func (s shopInfoTabDo) FindByPage(offset int, limit int) (result []*model.ShopInfoTab, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shopInfoTabDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shopInfoTabDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shopInfoTabDo) Delete(models ...*model.ShopInfoTab) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shopInfoTabDo) withDO(do gen.Dao) *shopInfoTabDo {
	s.DO = *do.(*gen.DO)
	return s
}
