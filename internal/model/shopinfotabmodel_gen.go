// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shopInfoTabFieldNames          = builder.RawFieldNames(&ShopInfoTab{})
	shopInfoTabRows                = strings.Join(shopInfoTabFieldNames, ",")
	shopInfoTabRowsExpectAutoSet   = strings.Join(stringx.Remove(shopInfoTabFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	shopInfoTabRowsWithPlaceHolder = strings.Join(stringx.Remove(shopInfoTabFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	shopInfoTabModel interface {
		Insert(ctx context.Context, data *ShopInfoTab) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ShopInfoTab, error)
		FindOneByShopId(ctx context.Context, shopId uint64) (*ShopInfoTab, error)
		Update(ctx context.Context, data *ShopInfoTab) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultShopInfoTabModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ShopInfoTab struct {
		Id       uint64 `db:"id"`
		ShopId   uint64 `db:"shop_id"`
		ShopName string `db:"shop_name"`
		Ctime    uint64 `db:"ctime"`
		Mtime    uint64 `db:"mtime"`
	}
)

func newShopInfoTabModel(conn sqlx.SqlConn) *defaultShopInfoTabModel {
	return &defaultShopInfoTabModel{
		conn:  conn,
		table: "`shop_info_tab`",
	}
}

func (m *defaultShopInfoTabModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultShopInfoTabModel) FindOne(ctx context.Context, id uint64) (*ShopInfoTab, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shopInfoTabRows, m.table)
	var resp ShopInfoTab
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShopInfoTabModel) FindOneByShopId(ctx context.Context, shopId uint64) (*ShopInfoTab, error) {
	var resp ShopInfoTab
	query := fmt.Sprintf("select %s from %s where `shop_id` = ? limit 1", shopInfoTabRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, shopId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShopInfoTabModel) Insert(ctx context.Context, data *ShopInfoTab) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, shopInfoTabRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ShopId, data.ShopName, data.Ctime, data.Mtime)
	return ret, err
}

func (m *defaultShopInfoTabModel) Update(ctx context.Context, newData *ShopInfoTab) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shopInfoTabRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ShopId, newData.ShopName, newData.Ctime, newData.Mtime, newData.Id)
	return err
}

func (m *defaultShopInfoTabModel) tableName() string {
	return m.table
}
