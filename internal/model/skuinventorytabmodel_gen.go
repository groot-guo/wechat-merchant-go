// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	skuInventoryTabFieldNames          = builder.RawFieldNames(&SkuInventoryTab{})
	skuInventoryTabRows                = strings.Join(skuInventoryTabFieldNames, ",")
	skuInventoryTabRowsExpectAutoSet   = strings.Join(stringx.Remove(skuInventoryTabFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	skuInventoryTabRowsWithPlaceHolder = strings.Join(stringx.Remove(skuInventoryTabFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	skuInventoryTabModel interface {
		Insert(ctx context.Context, data *SkuInventoryTab) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SkuInventoryTab, error)
		FindOneBySkuId(ctx context.Context, skuId string) (*SkuInventoryTab, error)
		Update(ctx context.Context, data *SkuInventoryTab) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSkuInventoryTabModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SkuInventoryTab struct {
		Id        uint64 `db:"id"`
		SkuId     string `db:"sku_id"`
		Inventory uint64 `db:"inventory"`
		Damage    uint64 `db:"damage"`
		Ctime     uint64 `db:"ctime"`
		Mtime     uint64 `db:"mtime"`
	}
)

func newSkuInventoryTabModel(conn sqlx.SqlConn) *defaultSkuInventoryTabModel {
	return &defaultSkuInventoryTabModel{
		conn:  conn,
		table: "`sku_inventory_tab`",
	}
}

func (m *defaultSkuInventoryTabModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSkuInventoryTabModel) FindOne(ctx context.Context, id uint64) (*SkuInventoryTab, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", skuInventoryTabRows, m.table)
	var resp SkuInventoryTab
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSkuInventoryTabModel) FindOneBySkuId(ctx context.Context, skuId string) (*SkuInventoryTab, error) {
	var resp SkuInventoryTab
	query := fmt.Sprintf("select %s from %s where `sku_id` = ? limit 1", skuInventoryTabRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, skuId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSkuInventoryTabModel) Insert(ctx context.Context, data *SkuInventoryTab) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, skuInventoryTabRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SkuId, data.Inventory, data.Damage, data.Ctime, data.Mtime)
	return ret, err
}

func (m *defaultSkuInventoryTabModel) Update(ctx context.Context, newData *SkuInventoryTab) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, skuInventoryTabRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.SkuId, newData.Inventory, newData.Damage, newData.Ctime, newData.Mtime, newData.Id)
	return err
}

func (m *defaultSkuInventoryTabModel) tableName() string {
	return m.table
}
